{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww14580\viewh15220\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 --------------------------------------------------------------------------------\
--  Auteur   : Mathis Sigier\
--  Objectif : Permettre de faire r\'e9viser la ou les table(s) de multiplications d'entier(s) entre 1 et 10\
\pard\tx566\tx1133\tx1700\tx2267\tx2495\tx2511\tx2757\tx2779\tx2779\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 --------------------------------------------------------------------------------\
\
with Ada.Text_IO;           use Ada.Text_IO;\
with Ada.Integer_Text_IO;   use Ada.Integer_Text_IO;\
with Ada.Calendar;          use Ada.Calendar;\
with Ada.Numerics.Discrete_Random;\
\
\
procedure Multiplications is\
\
\
	generic\
		Lower_Bound, Upper_Bound  : Integer;	-- bounds in which random numbers are generated\
		-- \{ Lower_Bound <= Upper_Bound \}\
	\
	package Alea is\
	\
		-- Compute a random number in the range Lower_Bound..Upper_Bound.\
		--\
		-- Notice that Ada advocates the definition of a range type in such a case\
		-- to ensure that the type reflects the real possible values.\
		procedure Get_Random_Number (Resultat : out Integer);\
	\
	end Alea;\
\
	\
	package body Alea is\
	\
		subtype Intervalle is Integer range Lower_Bound..Upper_Bound;\
	\
		package  Generateur_P is\
			new Ada.Numerics.Discrete_Random (Intervalle);\
		use Generateur_P;\
	\
		Generateur : Generateur_P.Generator;\
	\
		procedure Get_Random_Number (Resultat : out Integer) is\
		begin\
			Resultat := Random (Generateur);\
		end Get_Random_Number;\
	\
	begin\
		Reset(Generateur);\
	end Alea;\
    \
    package Mon_Alea is\
		new Alea (1, 10);  -- g\'e9n\'e9rateur de nombre dans l'intervalle [1, 10]\
	use Mon_Alea;\
\
	Nombre: Integer;\
\
    begin\
        Rejouer:='o';\
        --- R\'e9viser la ou les table(s) de multiplications\
        loop\
            --- Demande d'un entier n ad\'e9quate\
            Put("Table \'e0 r\'e9viser : ");\
            Get(n);\
            while n=<0 or n>10 loop\
                put("Impossible. La table doit \'eatre entre 0 et 10.");\
                put("Table \'e0 r\'e9viser : ");\
                get(n);\
            end loop;\
            --- Questionner sur 10 multiplications de la table de n\
            t:=0;\
            for k in 1..10 loop\
                --- Poser une multiplication de la table de n\
                nb:=Get_Random_Number(Resultat : out Integer);\
                put("(M" & k & ") " & n & '*' & nb & " ?");\
                get(res);\
                --- V\'e9rifier la r\'e9ponse\
                if n*nb=res then\
                    t:=t+1;\
                    Put("Bravo!");\
                else\
                    put("Mauvaise r\'e9ponse");\
                end if;\
            end loop;\
            --- Commenter le total\
            case t is\
                when 10 => Ecrire("Aucune erreur. Excellent !");\
                when 9 => Ecrire("Une seule erreur. Tr\'e8s bien.");\
                when 0 => Ecrire("Tout est faux ! Volontaire ?");\
                when 6|7|8|9 => Ecrire(10-t & " erreurs. Il faut encore travailler la table de " & n & '.');\
                when 2|3|4|5 => Ecrire("Seulement " & t & "bonnes r\'e9ponses. Il faut apprendre la table de " & n & " !");\
            end case;\
            Put("On continue (o/n) ?");\
            Get(Rejouer);    \
            exit when not(Rejouer='o' or Rejouer ='O');\
        end loop;\
end Multiplications;\
}